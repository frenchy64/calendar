* TODO POPL Paper [5/11]
   DEADLINE: <2015-05-19 Tue 21:00>

** TODO link multimethods with HMaps

** TODO talk about how MM, HMaps, Java are the major features of core.typed

** synergy between multimethods and occurrence typing

** TODO crystal clear CONTRIBUTIONS section


** TODO refer directly to examples repo

** TODO Update metatheory section with new JVM ops

** TODO Survey other JVM languages

* Campaign [1/2]
** TODO blog post on REPL
- need to fix REPL in branch first
  - need to recurse into 'do' expressions
- don't want to break typed special forms
  - idea: track whether a do expression is a special form
    as you analyze it
    - ie. `(do ::t/special-form ...)` might be special, remember that...
- can we reuse c.c.t.check.do?
  - not really, takes an AST, I want a function that takes Clojure syntax

* TODO GSoC [0/1]

** TODO Merge Transients
   DEADLINE: <2015-05-23 Sat>


* TODO Digging
  need more digging for untyped gradual polymorphic things
  - better sampling

* TODO POPL Paper [3/5]
  DEADLINE: <2015-05-21 Thu>
** DONE combined type-check rewrite relation
   DEADLINE: <2015-05-20 Wed>
  takes expression
  Env exp -> type -> exp
  - added hybrid checking-rewrite judgement
  - updated everything but Java rules


** DONE add back T-{Method,New,Field}
  - should rewrite from reflective to nonreflective
  - don't need reflective to reflective rule, since illtyped
** DONE check that T-{Method,New,Field}Static still make sense

** TODO implement Resolve{Field,New,Method}

** TODO Update proof

* TODO Gradual typing Plan
  - lay out all challenges
  - skeleton for paper

* DONE require/load finish
  DEADLINE: <2015-05-21 Thu>

* DONE Fix CTYP-218

* TODO define an eval-fn in check-form-common for nREPL
  DEADLINE: <2015-05-21 Thu>

* TODO Implement :load-file nREPL packet

* DONE Update B-Field etc.
* DONE Implement metafunctions
  DEADLINE: <2015-05-22 Fri>
  CLOCK: [2015-05-22 Fri 08:16]--[2015-05-22 Fri 10:22] =>  2:06
  
* TODO Update theorem to use new judgement
e rewrites to e'

* TODO Typed Clojure code
  - how much using various features
  - collection of repositories
    - decide on corpus
    - eg. how often do they call java methods?
    - how often do they specify a Java method is nullable
    - HMaps in more code?
    - how many multimethods
  - ask on twitter
* TODO add subtyping for classes to paper
  - should just need C <: Object
  - no other subtyping
  - bit of a copout but not the important part of the paper
