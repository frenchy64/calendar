* TODO POPL Paper [5/11]
   DEADLINE: <2015-05-19 Tue 21:00>

** TODO link multimethods with HMaps

** TODO talk about how MM, HMaps, Java are the major features of core.typed

** synergy between multimethods and occurrence typing

** TODO crystal clear CONTRIBUTIONS section


** TODO refer directly to examples repo

** TODO Update metatheory section with new JVM ops

** TODO Survey other JVM languages

* Campaign [1/2]
** TODO blog post on REPL
- need to fix REPL in branch first
  - need to recurse into 'do' expressions
- don't want to break typed special forms
  - idea: track whether a do expression is a special form
    as you analyze it
    - ie. `(do ::t/special-form ...)` might be special, remember that...
- can we reuse c.c.t.check.do?
  - not really, takes an AST, I want a function that takes Clojure syntax

* TODO GSoC [0/1]

** TODO Merge Transients
   DEADLINE: <2015-05-23 Sat>


* TODO Digging
  need more digging for untyped gradual polymorphic things
  - better sampling

* TODO POPL Paper [3/5]
  DEADLINE: <2015-05-21 Thu>
** DONE combined type-check rewrite relation
   DEADLINE: <2015-05-20 Wed>
  takes expression
  Env exp -> type -> exp
  - added hybrid checking-rewrite judgement
  - updated everything but Java rules


** DONE add back T-{Method,New,Field}
  - should rewrite from reflective to nonreflective
  - don't need reflective to reflective rule, since illtyped
** DONE check that T-{Method,New,Field}Static still make sense

** TODO implement Resolve{Field,New,Method}

** TODO Update proof

* TODO Gradual typing Plan
  - lay out all challenges
  - skeleton for paper


* TODO Typed Clojure code
  - how much using various features
  - collection of repositories
    - decide on corpus
    - eg. how often do they call java methods?
    - how often do they specify a Java method is nullable
    - HMaps in more code?
    - how many multimethods
  - ask on twitter
* TODO add subtyping for classes to paper
  - should just need C <: Object
  - no other subtyping
  - bit of a copout but not the important part of the paper


* TODO Need to say TJ is indeed a function
  - the smallest (most subtyped class) C

* TODO update core.typed latest in imap
* TODO Fix vim-fireplace :load-file
  - if throws an error, the ex msg isn't printed

* TODO resolution field implement
* TODO update proof [19/25]
  - do we need a gradual guarantee kind of lemma?
    - no
** DONE Lemma A.4
   CLOCK: [2015-05-31 Sun 10:58]--[2015-05-31 Sun 11:06] =>  0:08
** DONE Check lemma A.5
   CLOCK: [2015-05-31 Sun 11:07]--[2015-05-31 Sun 11:10] =>  0:03
   uses path-translate?
** DONE Definition A.1
   CLOCK: [2015-05-31 Sun 11:10]--[2015-05-31 Sun 11:13] =>  0:03
** DONE Add T-{New,Field,Method} [3/3]
   CLOCK: [2015-05-31 Sun 11:57]--[2015-05-31 Sun 12:08] =>  0:11
*** DONE Add T-New proof 
    CLOCK: [2015-05-31 Sun 12:08]--[2015-05-31 Sun 12:08] =>  0:00
*** DONE Add T-Field proof
    CLOCK: [2015-05-31 Sun 12:23]--[2015-05-31 Sun 12:41] =>  0:18
*** DONE Add T-Method proof
    CLOCK: [2015-05-31 Sun 12:41]--[2015-05-31 Sun 12:52] =>  0:11

** DONE maybe remove T-{New,Field,Method}Static

    - double check these rules
  - removed
** DONE Check trivial rules
** DONE Check T-Do
** DONE T-Def{Method,Multi} may have changed [2/2]
   CLOCK: [2015-05-31 Sun 13:00]--[2015-05-31 Sun 13:04] =>  0:04
*** DONE update rewrite T-DefMulti
*** DONE update T-DefMethod
    CLOCK: [2015-05-31 Sun 13:04]--[2015-05-31 Sun 13:11] =>  0:07

** DONE update T-App
** DONE update T-IsA
** DONE update T-GetHMap
** DONE update T-GetHMapAbsent
** DONE update T-GetHMapPartialDefault
** DONE update T-If
** DONE update T-Assoc
** DONE update T-Let
** DONE update T-Clos
** DONE update T-Multi
** DONE update T-Abs
** TODO B-BetaClosure is incomplete
** TODO Theorem A.1 proof sketch needs updating
** TODO Delete Theorem A.3, A.4, A.5, A.6, Lemma A.8
** TODO Proof of A.5 in unfinished
** TODO Update Syntax figure
** TODO Complete T-App
** TODO add back T-{New,Field,Method}Static proof and rules
   - subsumption can always be applied so we can rewrite
     nonreflective interop, ie. we need these rules
* TODO implement reflection resolution
  - field resolution seems like an easy starting goal
* DONE update feeds2imap library to latest core.typed
* TODO Remove blue highlighting trdiff
* TODO beginning of section 3 should introduce rewriting judgement
* TODO fix require :reload
